// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calcGseaStatCumulativeBatch
List calcGseaStatCumulativeBatch(NumericVector const& stats, double gseaParam, NumericVector const& pathwayScores, IntegerVector const& pathwaysSizes, int iterations, int seed);
RcppExport SEXP _signatureSearch_calcGseaStatCumulativeBatch(SEXP statsSEXP, SEXP gseaParamSEXP, SEXP pathwayScoresSEXP, SEXP pathwaysSizesSEXP, SEXP iterationsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector const& >::type stats(statsSEXP);
    Rcpp::traits::input_parameter< double >::type gseaParam(gseaParamSEXP);
    Rcpp::traits::input_parameter< NumericVector const& >::type pathwayScores(pathwayScoresSEXP);
    Rcpp::traits::input_parameter< IntegerVector const& >::type pathwaysSizes(pathwaysSizesSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(calcGseaStatCumulativeBatch(stats, gseaParam, pathwayScores, pathwaysSizes, iterations, seed));
    return rcpp_result_gen;
END_RCPP
}
// calcGseaStatCumulative
NumericVector calcGseaStatCumulative(NumericVector const& stats, IntegerVector const& selectedStats, double gseaParam);
RcppExport SEXP _signatureSearch_calcGseaStatCumulative(SEXP statsSEXP, SEXP selectedStatsSEXP, SEXP gseaParamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector const& >::type stats(statsSEXP);
    Rcpp::traits::input_parameter< IntegerVector const& >::type selectedStats(selectedStatsSEXP);
    Rcpp::traits::input_parameter< double >::type gseaParam(gseaParamSEXP);
    rcpp_result_gen = Rcpp::wrap(calcGseaStatCumulative(stats, selectedStats, gseaParam));
    return rcpp_result_gen;
END_RCPP
}
// calcGseaStatBatchCpp
NumericVector calcGseaStatBatchCpp(NumericVector const& stats, List const& selectedGenes, IntegerVector const& geneRanks);
RcppExport SEXP _signatureSearch_calcGseaStatBatchCpp(SEXP statsSEXP, SEXP selectedGenesSEXP, SEXP geneRanksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector const& >::type stats(statsSEXP);
    Rcpp::traits::input_parameter< List const& >::type selectedGenes(selectedGenesSEXP);
    Rcpp::traits::input_parameter< IntegerVector const& >::type geneRanks(geneRanksSEXP);
    rcpp_result_gen = Rcpp::wrap(calcGseaStatBatchCpp(stats, selectedGenes, geneRanks));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_signatureSearch_calcGseaStatCumulativeBatch", (DL_FUNC) &_signatureSearch_calcGseaStatCumulativeBatch, 6},
    {"_signatureSearch_calcGseaStatCumulative", (DL_FUNC) &_signatureSearch_calcGseaStatCumulative, 3},
    {"_signatureSearch_calcGseaStatBatchCpp", (DL_FUNC) &_signatureSearch_calcGseaStatBatchCpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_signatureSearch(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
